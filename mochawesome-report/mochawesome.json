{
  "stats": {
    "suites": 1,
    "tests": 10,
    "passes": 7,
    "pending": 0,
    "failures": 3,
    "start": "2024-12-03T06:33:17.119Z",
    "end": "2024-12-03T06:34:51.400Z",
    "duration": 94281,
    "testsRegistered": 10,
    "passPercent": 70,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "33a2ca66-90b1-40f6-ad50-a3a582eba01b",
      "title": "",
      "fullFile": "C:\\Users\\LENOVO\\AquaProjects\\Tractive_GPS_Test\\tests\\End_toEnd_Tests.spec.js",
      "file": "\\tests\\End_toEnd_Tests.spec.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "09dd36aa-7f80-421c-8bb3-bcee4fcc8301",
          "title": "End-to-End Tests",
          "fullFile": "C:\\Users\\LENOVO\\AquaProjects\\Tractive_GPS_Test\\tests\\End_toEnd_Tests.spec.js",
          "file": "\\tests\\End_toEnd_Tests.spec.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"End-to-End Tests\"",
              "fullTitle": "End-to-End Tests \"before all\" hook in \"End-to-End Tests\"",
              "timedOut": false,
              "duration": 7656,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "this.timeout(30000);  // Increase timeout for async operations\nbrowser = await firefox.launch({headless: false});\ncontext = await browser.newContext();\n// Add cookies\nawait context.addCookies([{\n    name: 'interview',\n    value: '7lBPV9iik6r9MNE5dKw9nzF9CstdlEJl',\n    domain: '.tractive.com',\n    path: '/',\n    secure: true,\n}]);\npage = await context.newPage();\nloginPage = new LoginPage(page);\nhomePage = new HomePage(page);\nsignUpPage = new SignUpPage(page);\ntestData = new TestData();  // Corrected instantiation",
              "err": {},
              "uuid": "b19e9002-54c3-4278-a27f-8e7d76fe5584",
              "parentUUID": "09dd36aa-7f80-421c-8bb3-bcee4fcc8301",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook in \"End-to-End Tests\"",
              "fullTitle": "End-to-End Tests \"after all\" hook in \"End-to-End Tests\"",
              "timedOut": false,
              "duration": 2308,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "this.timeout(5000);  // Increase timeout for after hook if needed\nif (page) await page.close();\nif (browser) await browser.close();",
              "err": {},
              "uuid": "fcc4394b-aff9-4f5e-8efa-d4bf58bc129e",
              "parentUUID": "09dd36aa-7f80-421c-8bb3-bcee4fcc8301",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "should verify URL and Title and login page",
              "fullTitle": "End-to-End Tests should verify URL and Title and login page",
              "timedOut": false,
              "duration": 8753,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "this.timeout(30000);  // Increase timeout for this test\nawait loginPage.open();\nawait page.waitForSelector('button[type=\"submit\"]');  // Ensure the login button is visible\nawait page.evaluate(() => {\n    window.moveTo(0, 0);\n    window.resizeTo(window.screen.availWidth, window.screen.availHeight);\n});\nconst currentUrl = await page.url();\nexpect(currentUrl).to.include(loginPage.url);\nawait homePage.verifyPageTitle();",
              "err": {},
              "uuid": "82a29285-82e8-4ab7-9d23-ab3b8d77ec93",
              "parentUUID": "09dd36aa-7f80-421c-8bb3-bcee4fcc8301",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should verify the presence of the Tractive logo",
              "fullTitle": "End-to-End Tests should verify the presence of the Tractive logo",
              "timedOut": false,
              "duration": 193,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "this.timeout(10000); // Set a timeout for the test\nawait loginPage.open(); // Ensure you're on the correct page\n// Check if the logo is visible on the page\nconst logoSelector = '//img[@alt=\"Tractive Logo\"]';\nconst isLogoVisible = await page.isVisible(logoSelector);\n// Log the result for debugging purposes\nif (isLogoVisible) {\n    console.log('Logo is visible on the page.');\n} else {\n    console.error('Logo is NOT visible on the page.');\n}\n// Assert that the logo is indeed visible\nexpect(isLogoVisible).to.be.true;",
              "err": {},
              "uuid": "5f85a686-e46f-4ef0-8942-a14813174b78",
              "parentUUID": "09dd36aa-7f80-421c-8bb3-bcee4fcc8301",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should log in with valid credentials with singout",
              "fullTitle": "End-to-End Tests should log in with valid credentials with singout",
              "timedOut": false,
              "duration": 15918,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "this.timeout(30000);  // Increase timeout for this test\n// Log the start of the test\nconsole.log('Starting login test with valid credentials');\nconst loginData = testData.valid_login();  // Use valid login data\n// Ensure the email field is visible and enter email\nawait loginPage.enterEmail(loginData.email);\nconsole.log('Entered email');\n// Ensure the password field is visible and enter password\nawait loginPage.enterPassword(loginData.password);\nconsole.log('Entered password');\n// Wait for submit button to be clickable and click it\nawait loginPage.clickSubmitButton();\nconsole.log('Clicked submit button');\n// Wait for login success confirmation\nconst isLoginSuccessful = await loginPage.isLoginSuccessful();\nexpect(isLoginSuccessful).to.be.true;\n// If login is successful, log out\nif (isLoginSuccessful) {\n    console.log('Login successful, proceeding to sign out');\n    await homePage.signOut();\n} else {\n    console.error('Login failed');\n}",
              "err": {
                "message": "TimeoutError: page.waitForSelector: Timeout 15000ms exceeded.\nCall log:\n  - waiting for locator('//div[@class=\\'sign-out-container\\']//tgps-sidebar-action-item[@class=\\'ng-scope ng-isolate-scope\\']') to be visible\n",
                "estack": "page.waitForSelector: Timeout 15000ms exceeded.\nCall log:\n  - waiting for locator('//div[@class=\\'sign-out-container\\']//tgps-sidebar-action-item[@class=\\'ng-scope ng-isolate-scope\\']') to be visible\n\n    at HomePage.signOut (Pages\\Homepage.js:62:29)\n    at Context.<anonymous> (tests\\End_toEnd_Tests.spec.js:100:32)",
                "diff": null
              },
              "uuid": "58db200f-38cd-439f-b6ff-b434a04c33ce",
              "parentUUID": "09dd36aa-7f80-421c-8bb3-bcee4fcc8301",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should show an error for invalid login credentials",
              "fullTitle": "End-to-End Tests should show an error for invalid login credentials",
              "timedOut": false,
              "duration": 1318,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "this.timeout(90000);  // Increase timeout for this test\nconst loginData = testData.invalid_login();  // Use invalid login data\nawait loginPage.enterEmail(loginData.email);\nawait loginPage.enterPassword(loginData.password);\nawait loginPage.clickSubmitButton();\n// Variable to store alert message\nlet alertMessage = '';\n// Handle the dialog pop-up\npage.on('dialog', async (dialog) => {\n    alertMessage = dialog.message();  // Capture the dialog message\n    console.log('Alert Message: ', alertMessage);  // Log the alert message for debugging\n    await dialog.accept();  // Accept the alert (close the alert)\n});\nawait page.waitForTimeout(1000);  // Adjust timeout as needed\n// Assert that the alert message matches the expected error message\nexpect(alertMessage).to.equal(alertMessage);  // Change the message to match your app's error message\n//const isLoginPageVisible = await loginPage.isLoginPageVisible();\n//expect(isLoginPageVisible).to.be.true;",
              "err": {},
              "uuid": "dfd46810-525c-4f93-a23e-abe9561fbe95",
              "parentUUID": "09dd36aa-7f80-421c-8bb3-bcee4fcc8301",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "sign in Google Auth",
              "fullTitle": "End-to-End Tests sign in Google Auth",
              "timedOut": false,
              "duration": 5541,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "this.timeout(20000); // Set a custom timeout for handling potential delays in the sign-in flow\n// Handle the Google Sign-In process\nawait signUpPage.handleGoogleSignInProcess();\nconst email = this.page.locator(\"//input[@type='email']\").fill('macwantejaskumar@gmail.com');\nconsole.log('Google Sign-In flow.');\nconst isGoogleSignInSuccessful = await signUpPage.isGoogleSignInSuccessful();\nexpect(isGoogleSignInSuccessful, 'Google Sign-In failed').to.be.true;",
              "err": {
                "message": "TimeoutError: locator.waitFor: Timeout 5000ms exceeded.\nCall log:\n  - waiting for locator('//iframe[@id=\\'gsi_862948_12528\\']') to be visible\n",
                "estack": "locator.waitFor: Timeout 5000ms exceeded.\nCall log:\n  - waiting for locator('//iframe[@id=\\'gsi_862948_12528\\']') to be visible\n\n    at SignUpPage.handleGoogleSignInProcess (Pages\\Signup_page.js:170:31)\n    at async Context.<anonymous> (tests\\End_toEnd_Tests.spec.js:133:9)",
                "diff": null
              },
              "uuid": "e9de5de4-e0aa-42ec-ab02-0617357f17ae",
              "parentUUID": "09dd36aa-7f80-421c-8bb3-bcee4fcc8301",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should validate and submit the sign-up form",
              "fullTitle": "End-to-End Tests should validate and submit the sign-up form",
              "timedOut": false,
              "duration": 651,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "this.timeout(80000);  // Increase timeout for this test\nawait signUpPage.open();  \nconst currentUrl = await page.url();\nexpect(currentUrl).to.include(signUpPage.url);\nawait signUpPage.EmptyFieldFocus();\nawait signUpPage.assertFirstNameValidation();\nawait signUpPage.assertLastNameValidation();\nawait signUpPage.assertEmailValidation();\nawait signUpPage.assertPasswordValidation();",
              "err": {},
              "uuid": "2b5b2447-2ac3-478b-8bc1-3d7e13d08719",
              "parentUUID": "09dd36aa-7f80-421c-8bb3-bcee4fcc8301",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should validate invalid email format",
              "fullTitle": "End-to-End Tests should validate invalid email format",
              "timedOut": false,
              "duration": 998,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const invalidData = testData.invalid_Email_password(); // Retrieve invalid email from test data\n// Enter invalid email and verify validation message\nawait signUpPage.enterInvalidEmail(invalidData.email);\nawait signUpPage.assertInvalidEmailValidation();",
              "err": {},
              "uuid": "75ec98a1-35d2-4953-bcac-3df3352a96ae",
              "parentUUID": "09dd36aa-7f80-421c-8bb3-bcee4fcc8301",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should validate password length",
              "fullTitle": "End-to-End Tests should validate password length",
              "timedOut": false,
              "duration": 59,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const invalidData = testData.invalid_Email_password(); // Retrieve invalid password from test data\n// Enter invalid password and verify validation message\nawait signUpPage.enterInvalidPassword(invalidData.password);\nawait signUpPage.assertPasswordLengthValidation();",
              "err": {},
              "uuid": "c248b2eb-545d-4b78-ba13-628ec0c5730b",
              "parentUUID": "09dd36aa-7f80-421c-8bb3-bcee4fcc8301",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should successfully submit the form with valid data with same Email already Exist",
              "fullTitle": "End-to-End Tests should successfully submit the form with valid data with same Email already Exist",
              "timedOut": false,
              "duration": 30762,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "this.timeout(70000);\nconst validData = testData.valid_signup_data(); // Retrieve valid signup data from test data\n// Enter valid data into the form fields\nawait signUpPage.enterFirstName(validData.firstName);\nawait signUpPage.enterLastname(validData.lastName);\nawait signUpPage.enterEmail(validData.email);\nawait signUpPage.enterPassword(validData.password);\n// If there is a checkbox, click it\nawait signUpPage.clickCheckbox();\n// Submit the form if the submit button is visible\nawait signUpPage.clickSubmitButtonIfVisible();\n// Wait for a moment for the submission to process\nconsole.log('Waiting for ...');\nawait page.waitForTimeout(30000);  // Pause execution for 30 seconds\n// Check for any dialog box (in case of success or failure)\npage.on('dialog', async (dialog) => {\n    const alertMessage = dialog.message();\n    console.log('Alert Message:', alertMessage);\n    if (alertMessage.includes('Account creation failed. You entered invalid information.')) {\n        await dialog.accept();  // Close the dialog\n        console.log('Dialog error message verified.');\n        expect(alertMessage).to.include('Account creation failed. You entered invalid information.');\n    }\n});\nconsole.log('Account creation failed.!');\nconst currentUrl = await page.url();\nexpect(currentUrl).to.include(currentUrl);",
              "err": {},
              "uuid": "9ba04a05-e107-40a3-aa5f-460753dfe106",
              "parentUUID": "09dd36aa-7f80-421c-8bb3-bcee4fcc8301",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should submit the Signup form wth Invalid data Passing",
              "fullTitle": "End-to-End Tests should submit the Signup form wth Invalid data Passing",
              "timedOut": false,
              "duration": 20061,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "this.timeout(70000);\nconst InvalidData = testData.Invalid_signup_data(); // Retrieve valid signup data from test data\n// Enter valid data into the form fields\nawait signUpPage.enterFirstName(InvalidData.firstName);\nawait signUpPage.enterLastname(InvalidData.lastName);\nawait signUpPage.enterEmail(InvalidData.email);\nawait signUpPage.enterPassword(InvalidData.password);\n// If there is a checkbox, click it\nawait signUpPage.clickCheckbox();\n// Submit the form if the submit button is visible\nawait signUpPage.clickSubmitButtonIfVisible();",
              "err": {
                "message": "Error: locator.click: Target page, context or browser has been closed\nCall log:\n  - waiting for locator('//button[@type=\\'submit\\']')\n    - locator resolved to <button type=\"submit\" disabled=\"disabled\" class=\"tcommon-button tcommon-button--cta\" ng-class=\"{ loading: tcommonButton.state.loading }\" ng-disabled=\"tcommonButton.ngDisabled || tcommonButton.state.loading\">…</button>\n  - attempting click action\n    2 × waiting for element to be visible, enabled and stable\n      - element is not enabled\n    - retrying click action\n    - waiting 20ms\n    2 × waiting for element to be visible, enabled and stable\n      - element is not enabled\n    - retrying click action\n      - waiting 100ms\n    37 × waiting for element to be visible, enabled and stable\n       - element is not enabled\n     - retrying click action\n       - waiting 500ms\n",
                "estack": "locator.click: Target page, context or browser has been closed\nCall log:\n  - waiting for locator('//button[@type=\\'submit\\']')\n    - locator resolved to <button type=\"submit\" disabled=\"disabled\" class=\"tcommon-button tcommon-button--cta\" ng-class=\"{ loading: tcommonButton.state.loading }\" ng-disabled=\"tcommonButton.ngDisabled || tcommonButton.state.loading\">…</button>\n  - attempting click action\n    2 × waiting for element to be visible, enabled and stable\n      - element is not enabled\n    - retrying click action\n    - waiting 20ms\n    2 × waiting for element to be visible, enabled and stable\n      - element is not enabled\n    - retrying click action\n      - waiting 100ms\n    37 × waiting for element to be visible, enabled and stable\n       - element is not enabled\n     - retrying click action\n       - waiting 500ms\n\n    at SignUpPage.clickSubmitButtonIfVisible (Pages\\Signup_page.js:183:37)\n    at async Context.<anonymous> (tests\\End_toEnd_Tests.spec.js:209:9)",
                "diff": null
              },
              "uuid": "9178ea3b-ac68-4cdf-ae81-e591adfafb73",
              "parentUUID": "09dd36aa-7f80-421c-8bb3-bcee4fcc8301",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "82a29285-82e8-4ab7-9d23-ab3b8d77ec93",
            "5f85a686-e46f-4ef0-8942-a14813174b78",
            "dfd46810-525c-4f93-a23e-abe9561fbe95",
            "2b5b2447-2ac3-478b-8bc1-3d7e13d08719",
            "75ec98a1-35d2-4953-bcac-3df3352a96ae",
            "c248b2eb-545d-4b78-ba13-628ec0c5730b",
            "9ba04a05-e107-40a3-aa5f-460753dfe106"
          ],
          "failures": [
            "58db200f-38cd-439f-b6ff-b434a04c33ce",
            "e9de5de4-e0aa-42ec-ab02-0617357f17ae",
            "9178ea3b-ac68-4cdf-ae81-e591adfafb73"
          ],
          "pending": [],
          "skipped": [],
          "duration": 84254,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "10.8.2"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": null,
      "version": "6.2.0"
    }
  }
}